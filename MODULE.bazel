"""
Brings in third party dependencies via `bzlmod`,
Bazel's new dependency management system.

(Make sure you are using Bazel 4.2.1 or later and have
the `common --experimental_enable_bzlmod` in your .bazelrc).

NOTE: The comment above is a temporary necessity to use
until Bazel 6.0 is released. After that, the `common --experimental_enable_bzlmod` will not be necessary.
"""

module(
    name = "bazel-llvm",
    # authors = "pulanski",
    # description = "Compiler experiment built with C++, LLVM, and Bazel",
    compatibility_level = 1,
    version = "0.1.0",
    # bazel_compatibility = ">=5.3.2",
)

bazel_dep(name = "apple_rules_lint", version = "0.3.2")

linter = use_extension("@apple_rules_lint//lint:extensions.bzl", "linter")

linter.configure(
    name = "clang-tidy",
    config = "//.clang-tidy",
)

bazel_dep(name = "bazel_skylib", version = "1.3.0")
bazel_dep(name = "stardoc", repo_name = "io_bazel_stardoc", version = "0.5.3")
bazel_dep(name = "aspect_bazel_lib", version = "1.16.1")
bazel_dep(name = "rules_cc", version = "0.0.2")
bazel_dep(name = "abseil-cpp", repo_name = "com_google_absl", version = "20211102.0")
bazel_dep(name = "googletest", repo_name = "com_google_googletest", version = "1.11.0")
bazel_dep(name = "glog", repo_name = "com_google_glog", version = "0.5.0")
bazel_dep(name = "gflags", repo_name = "com_gflags_gflags", version = "2.2.2")
bazel_dep(name = "fmt", repo_name = "com_fmtlib_fmt", version = "8.1.1")
bazel_dep(name = "zlib", repo_name = "com_madler_zlib", version = "1.2.13")
bazel_dep(name = "rules_go", repo_name = "io_bazel_rules_go", version = "0.35.0")
bazel_dep(name = "gazelle", repo_name = "bazel_gazelle", version = "0.28.0")

# TODO look into using this. Currently, it's not working.
# Extensions doesn't seem to be exporting python properly.

# bazel_dep(name = "rules_python", version = "0.12.0")

# python = use_extension("@rules_python//python:extensions.bzl", "python")

# python.toolchain(
#     name = "python3_9",
#     python_version = "3.9",
# )

# use_repo(python, "python3_9_toolchains")

# register_toolchains(
#     "@python3_9_toolchains//:all",
# )

# pip = use_extension("@rules_python//python:extensions.bzl", "pip")

# pip.parse(
#     name = "pip",
#     requirements_lock = "//:requirements_lock.txt",
# )

# use_repo(pip, "pip")
