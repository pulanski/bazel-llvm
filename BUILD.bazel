# BUILD.bazel
# gazelle:exclude external

load("@bazel_gazelle//:def.bzl", "gazelle")

# load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")
load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")
# load("@pip//:requirements.bzl", "all_whl_requirements")

# load("@rules_python//gazelle/manifest:defs.bzl", "gazelle_python_manifest")
# load("@rules_python//gazelle/modules_mapping:def.bzl", "modules_mapping")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")

# This rule fetches the metadata for python packages we depend on. That data is
# required for the gazelle_python_manifest rule to update our manifest file.
# modules_mapping(
#     name = "modules_map",
#     wheels = all_whl_requirements,
# )

# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
# TODO not working yet, need to configure third_party deps
# gazelle_python_manifest(
#     name = "gazelle_python_manifest",
#     modules_mapping = ":modules_map",
#     pip_repository_incremental = True,
#     pip_repository_name = "pip",
#     requirements = "//:requirements_lock.txt",
# )

gazelle(name = "gazelle")

refresh_compile_commands(
    name = "refresh_compile_commands",
    targets = {
        "//...": "",
    },
)

compile_pip_requirements(
    name = "requirements",
    extra_args = ["--allow-unsafe"],
    requirements_in = "requirements.in",
    requirements_txt = "requirements_lock.txt",
    tags = [
        # The test pings pypi.org to make sure that the lock file matches the
        # requirements file.
        "requires-network",
    ],
)
