WORKSPACE_NAME = "com_pulanski_bazel_llvm"

# Declares that this directory is the root of a Bazel workspace.
# See https://docs.bazel.build/versions/main/build-ref.html#workspace
workspace(
    # How this workspace would be referenced with absolute labels from another workspace
    name = WORKSPACE_NAME,
)

load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository", "new_git_repository")
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Python
RULES_PYTHON_SHA = "4605a15abef6454511653f3d6dd26bce10b4f924a72299d2fdcf42f6313134a8"

RULES_PYTHON_VERSION = "a364fcac97b7ccadb5c5a703ec8ce2f2ecef0d97"

PYTHON_VERSION = "3.9.10"

# LLVM
LLVM_VERSION = "15.0.5"

LLVM_OS_ARCH = "arm64-apple-darwin21.0"

# Clang-tidy
CLANG_TIDY_SHA = "5a3649ac61413f279310058d90124ecb7c52c5ffb5749d9db10244ffd43225f6"

CLANG_TIDY_COMMIT = "32919e10d57fce09eb714936ba6155aee9a73150"

# Fuzzing
RULES_FUZZING_SHA = "6fd5814a271c90c196b9da723b642efb6752b2fcde137e42567a3c42a7cf9bb6"

RULES_FUZZING_COMMIT = "949389c58e7cbbb2b3a2c7d3b840cefc3c0e6353"

# Hedron
HEDRON_SHA = "b0a8af42e06108ec62382703daf27f7d8d247fd1b930f249045c70cd9d22f72e"

HEDRON_COMMIT = "c200ce8b3e0baa04fa5cc3fb222260c9ea06541f"

# Buildbuddy
BUILD_BUDDY_SHA = "a2a5cccec251211e2221b1587af2ce43c36d32a42f5d881737db3b546a536510"

BUILD_BUDDY_COMMIT = "829c8a574f706de5c96c54ca310f139f4acda7dd"

# Buildtools (buildifier, buildozer, unused_deps)
# BUILD_TOOLS_SHA =
#
# BUILD_TOOLS_COMMIT =

new_git_repository(
    name = "com_github_emirpasic_gods",
    build_file = "third_party/gods.BUILD",
    remote = "https://github.com/emirpasic/gods.git",
    tag = "v1.18.1",
)

new_git_repository(
    name = "in_gopkg_yaml_v2",
    build_file = "third_party/go_yaml.BUILD",
    remote = "https://github.com/go-yaml/yaml.git",
    tag = "v3.0.1",
)

http_archive(
    name = "bazel_clang_tidy",
    sha256 = CLANG_TIDY_SHA,
    strip_prefix = "bazel_clang_tidy-%s" % CLANG_TIDY_COMMIT,
    url = "https://github.com/dayfoo/bazel_clang_tidy/archive/%s.tar.gz" % CLANG_TIDY_COMMIT,
)

# Configure a Python toolchain.
# See https://github.com/bazelbuild/rules_python for more details.
http_archive(
    name = "rules_python",
    sha256 = RULES_PYTHON_SHA,
    strip_prefix = "rules_python-%s" % RULES_PYTHON_VERSION,
    urls = ["https://github.com/bazelbuild/rules_python/archive/%s.tar.gz" % RULES_PYTHON_VERSION],
)

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python3_9",
    # Available versions are listed in @rules_python//python:versions.bzl.
    # We recommend using the same version your team is already standardized on.
    python_version = PYTHON_VERSION,
)

# load("@python3_9//:defs.bzl", "interpreter")
load("@rules_python//python:pip.bzl", "pip_parse")

pip_parse(
    # (Optional) You can set an environment in the pip process to control its
    # behavior. Note that pip is run in "isolated" mode so no PIP_<VAR>_<NAME>
    # style env vars are read, but env vars that control requests and urllib3
    # can be passed
    # environment = {"HTTPS_PROXY": "http://my.proxy.fun/"},
    name = "pip",
    # python_interpreter_target = interpreter,
    requirements_lock = "//:requirements_lock.txt",
)

load("@pip//:requirements.bzl", "install_deps")

# Initialize repositories for all packages in requirements_lock.txt.
install_deps()

load("//third_party:llvm_transitive_deps.bzl", "llvm_transitive_deps")

# Load in third party dependencies required for compilation
# These currently include zlib and zstd which are transitive dependencies
# of LLVM used for compression during optimization passes.
# These dependencies are defined within the third_party directory
# within the repo root. This may be expanded on in the future as needed.
llvm_transitive_deps()

# Configure LLVM, compiler middle/backend infrastructure
load("//third_party:llvm.bzl", "llvm")

llvm(
    name = "llvm",
    os_arch = LLVM_OS_ARCH,
    version = LLVM_VERSION,
    workspace_name = WORKSPACE_NAME,
)

http_archive(
    name = "rules_fuzzing",
    sha256 = RULES_FUZZING_SHA,
    strip_prefix = "rules_fuzzing-%s" % RULES_FUZZING_COMMIT,
    urls = ["https://github.com/CodeIntelligenceTesting/rules_fuzzing/archive/%s.tar.gz" % RULES_FUZZING_COMMIT],
)

load("@rules_fuzzing//fuzzing:repositories.bzl", "rules_fuzzing_dependencies")

rules_fuzzing_dependencies()

load("@rules_fuzzing//fuzzing:init.bzl", "rules_fuzzing_init")

rules_fuzzing_init()

git_repository(
    name = "cifuzz",
    branch = "bazel-support",
    remote = "https://github.com/CodeIntelligenceTesting/cifuzz",
    strip_prefix = "tools/cmake/cifuzz/include/cifuzz",
)

# Hedron's Compile Commands Extractor for Bazel
# See https://github.com/hedronvision/bazel-compile-commands-extractor for more details.
# NOTE: I've been incredibly happy with this tool. It's been a huge help in getting
# IDE support for third-party libraries working when using Bazel w/ C family languages,
# primarly C++
http_archive(
    name = "hedron_compile_commands",
    sha256 = HEDRON_SHA,
    strip_prefix = "bazel-compile-commands-extractor-%s" % HEDRON_COMMIT,
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/%s.tar.gz" % HEDRON_COMMIT,
)

load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")

hedron_compile_commands_setup()

http_archive(
    name = "io_buildbuddy_buildbuddy_toolchain",
    sha256 = BUILD_BUDDY_SHA,
    strip_prefix = "buildbuddy-toolchain-%s" % BUILD_BUDDY_COMMIT,
    urls = ["https://github.com/buildbuddy-io/buildbuddy-toolchain/archive/%s.tar.gz" % BUILD_BUDDY_COMMIT],
)

load("@io_buildbuddy_buildbuddy_toolchain//:deps.bzl", "buildbuddy_deps")

buildbuddy_deps()

load("@io_buildbuddy_buildbuddy_toolchain//:rules.bzl", "buildbuddy")

buildbuddy(name = "buildbuddy_toolchain")
