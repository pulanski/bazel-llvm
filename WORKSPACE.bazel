WORKSPACE_NAME = "com_pulanski_bazel_llvm"

# Declares that this directory is the root of a Bazel workspace.
# See https://docs.bazel.build/versions/main/build-ref.html#workspace
workspace(
    # How this workspace would be referenced with absolute labels from another workspace
    name = WORKSPACE_NAME,
)

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Hedron
HEDRON_SHA = "b0a8af42e06108ec62382703daf27f7d8d247fd1b930f249045c70cd9d22f72e"

HEDRON_COMMIT = "c200ce8b3e0baa04fa5cc3fb222260c9ea06541f"

# Buildbuddy
BUILD_BUDDY_SHA = "a2a5cccec251211e2221b1587af2ce43c36d32a42f5d881737db3b546a536510"

BUILD_BUDDY_COMMIT = "829c8a574f706de5c96c54ca310f139f4acda7dd"

# Go
RULES_GO_SHA = "27b77fd0d6d704da1a37ac56428a68ecd2f54cfcea5a6bae4bc876564f37fb95"

RULES_GO_VERSION = "cd9a99a102c3599babe6d8aebaa568961370541c"

GO_VERSION = "1.19.1"

# Gazelle
GAZELLE_SHA = "fdfa7f0969e997d26378dd283fab89379403bd4379051da81f7268d5c04398f7"

GAZELLE_COMMIT = "06b821c9b085f3d7c21af06a33a990513351431c"

# Buildtools (buildifier, buildozer, unused_deps)
# BUILD_TOOLS_SHA =
#
# BUILD_TOOLS_COMMIT =

# Configure a Go toolchain.
# See https://github.com/bazelbuild/rules_go for more details.
http_archive(
    name = "io_bazel_rules_go",
    sha256 = RULES_GO_SHA,
    strip_prefix = "rules_go-%s" % RULES_GO_VERSION,
    urls = ["https://github.com/bazelbuild/rules_go/archive/%s.tar.gz" % RULES_GO_VERSION],
)

load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_rules_dependencies()

go_register_toolchains(version = GO_VERSION)

# Bring in Gazelle, a build file generator for Bazel.
# Gazelle can be used to generate BUILD files for the following languages.
#
# - Go
# - Java
# - Haskell
# - JavaScript
# - TypeScript
# - Protobuf
# - Python
# - Starlark
#
# See https://github.com/bazelbuild/bazel-gazelle for more details.
http_archive(
    name = "bazel_gazelle",
    sha256 = GAZELLE_SHA,
    strip_prefix = "bazel-gazelle-%s" % GAZELLE_COMMIT,
    urls = ["https://github.com/bazelbuild/bazel-gazelle/archive/%s.tar.gz" % GAZELLE_COMMIT],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies")

gazelle_dependencies(go_repository_default_config = "//:WORKSPACE.bazel")
# gazelle_dependencies(go_repository_default_config = "@//:WORKSPACE.bazel")

http_archive(
    name = "com_google_protobuf",
    sha256 = "3bd7828aa5af4b13b99c191e8b1e884ebfa9ad371b0ce264605d347f135d2568",
    strip_prefix = "protobuf-3.19.4",
    urls = [
        "https://github.com/protocolbuffers/protobuf/archive/v3.19.4.tar.gz",
    ],
)

load("@com_google_protobuf//:protobuf_deps.bzl", "protobuf_deps")

protobuf_deps()

http_archive(
    name = "com_github_bazelbuild_buildtools",
    sha256 = "ae34c344514e08c23e90da0e2d6cb700fcd28e80c02e23e4d5715dddcb42f7b3",
    strip_prefix = "buildtools-4.2.2",
    urls = [
        "https://github.com/bazelbuild/buildtools/archive/refs/tags/4.2.2.tar.gz",
    ],
)

load("//third_party:llvm_transitive_deps.bzl", "llvm_transitive_deps")

# Load in third party dependencies required for compilation
# These currently include zlib and zstd which are transitive dependencies
# of LLVM used for compression during optimization passes.
# These dependencies are defined within the third_party directory
# within the repo root. This may be expanded on in the future as needed.
llvm_transitive_deps()

# Configure LLVM, compiler middle/backend infrastructure
load("//third_party:llvm.bzl", "llvm")

llvm(
    name = "llvm",
    workspace_name = WORKSPACE_NAME,
)

# Hedron's Compile Commands Extractor for Bazel
# See https://github.com/hedronvision/bazel-compile-commands-extractor for more details.
# NOTE: I've been incredibly happy with this tool. It's been a huge help in getting
# IDE support for third-party libraries working when using Bazel w/ C family languages,
# primarly C++
http_archive(
    name = "hedron_compile_commands",
    sha256 = HEDRON_SHA,
    strip_prefix = "bazel-compile-commands-extractor-%s" % HEDRON_COMMIT,
    url = "https://github.com/hedronvision/bazel-compile-commands-extractor/archive/%s.tar.gz" % HEDRON_COMMIT,
)

load("@hedron_compile_commands//:workspace_setup.bzl", "hedron_compile_commands_setup")

hedron_compile_commands_setup()

http_archive(
    name = "io_buildbuddy_buildbuddy_toolchain",
    sha256 = BUILD_BUDDY_SHA,
    strip_prefix = "buildbuddy-toolchain-%s" % BUILD_BUDDY_COMMIT,
    urls = ["https://github.com/buildbuddy-io/buildbuddy-toolchain/archive/%s.tar.gz" % BUILD_BUDDY_COMMIT],
)

load("@io_buildbuddy_buildbuddy_toolchain//:deps.bzl", "buildbuddy_deps")

buildbuddy_deps()

load("@io_buildbuddy_buildbuddy_toolchain//:rules.bzl", "buildbuddy")

buildbuddy(name = "buildbuddy_toolchain")
